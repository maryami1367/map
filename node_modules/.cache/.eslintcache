[{"C:\\Users\\cmos\\Desktop\\map\\src\\index.js":"1","C:\\Users\\cmos\\Desktop\\map\\src\\App.js":"2","C:\\Users\\cmos\\Desktop\\map\\src\\components\\MainRouter.jsx":"3","C:\\Users\\cmos\\Desktop\\map\\src\\context\\Provider.jsx":"4","C:\\Users\\cmos\\Desktop\\map\\src\\pages\\Add.jsx":"5","C:\\Users\\cmos\\Desktop\\map\\src\\pages\\Map.jsx":"6","C:\\Users\\cmos\\Desktop\\map\\src\\components\\DraggableMarker.jsx":"7","C:\\Users\\cmos\\Desktop\\map\\src\\pages\\Edit.jsx":"8"},{"size":218,"mtime":1652682291144,"results":"9","hashOfConfig":"10"},{"size":214,"mtime":1652682291134,"results":"11","hashOfConfig":"10"},{"size":553,"mtime":1652701425602,"results":"12","hashOfConfig":"10"},{"size":566,"mtime":1652682291143,"results":"13","hashOfConfig":"10"},{"size":4444,"mtime":1652767974934,"results":"14","hashOfConfig":"10"},{"size":1395,"mtime":1652720209877,"results":"15","hashOfConfig":"10"},{"size":1786,"mtime":1652768665266,"results":"16","hashOfConfig":"10"},{"size":4911,"mtime":1652767998513,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1goj44m",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"C:\\Users\\cmos\\Desktop\\map\\src\\index.js",[],[],"C:\\Users\\cmos\\Desktop\\map\\src\\App.js",[],[],"C:\\Users\\cmos\\Desktop\\map\\src\\components\\MainRouter.jsx",[],[],"C:\\Users\\cmos\\Desktop\\map\\src\\context\\Provider.jsx",[],[],"C:\\Users\\cmos\\Desktop\\map\\src\\pages\\Add.jsx",[],[],"C:\\Users\\cmos\\Desktop\\map\\src\\pages\\Map.jsx",[],[],"C:\\Users\\cmos\\Desktop\\map\\src\\components\\DraggableMarker.jsx",["44"],[],"C:\\Users\\cmos\\Desktop\\map\\src\\pages\\Edit.jsx",["45","46","47","48","49"],[],"import { useEffect, useState, useMemo } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport DraggableMarker from '../components/DraggableMarker'\r\nimport { useContext } from 'react';\r\nimport { MainContext } from '../context/Provider';\r\nimport { useLocation, useNavigate, useParams } from 'react-router';\r\nimport { useRef } from 'react';\r\nimport markerIconPng from \"leaflet/dist/images/marker-icon.png\"\r\nimport { Icon } from \"leaflet\"\r\nimport classes from \"./pages.module.css\";\r\n\r\nconst center = {\r\n    lat: 35.69,\r\n    lng: 51.29,\r\n}\r\n\r\nconst Edit = () => {\r\n    const { name } = useParams()\r\n    const markerRef = useRef(null)\r\n    const { locations, setLocations } = useContext(MainContext)\r\n\r\n    const [formData, setFormData] = useState({\r\n        position: center,\r\n        name: \"\",\r\n        type: \"\",\r\n        logo: \"\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        const value = locations.find(item => item.name === name)\r\n        console.log(\"value\", value)\r\n        setFormData({\r\n            position: value.position,\r\n            name: value.name,\r\n            type: value.type,\r\n            logo: value.logo,\r\n        });\r\n    }, []);\r\n\r\n    const naviage = useNavigate()\r\n\r\n    const eventHandlers = useMemo(\r\n        () => ({\r\n            dragend() {\r\n                const marker = markerRef.current\r\n                if (marker != null) {\r\n                    setFormData((formData) => ({ ...formData, position: marker.getLatLng() }))\r\n                }\r\n            },\r\n        }),\r\n        [],\r\n    )\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        const valueIndex = locations.findIndex(item => item.name === name)\r\n        locations[valueIndex] = formData\r\n        naviage(\"/\")\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mainContainer}>\r\n            <form onSubmit={submitForm} className={classes.formContainer}>\r\n                <div className={classes.formGroups}>\r\n                    <h3>Share Location</h3> \r\n                    <div className={classes.formGroup}>\r\n                        <label>Location Name:</label>\r\n                        <input className={classes.input} name=\"name\" value={formData.name} onChange={(e) => setFormData((formData) => ({ ...formData, name: e.target.value }))}></input>  \r\n                    </div>\r\n\r\n                    <div className={classes.formGroup}>\r\n                        <label>Location on Map:</label>\r\n                        <div className={classes.mapContainer} style={{ height: 200 }}>\r\n                            <MapContainer center={center} zoom={13} scrollWheelZoom={false} style={{ height: 200 }}>\r\n                            <Marker\r\n                                draggable={true}\r\n                                eventHandlers={eventHandlers}\r\n                                position={formData.position}\r\n                                icon={new Icon({ iconUrl: markerIconPng, iconSize: [25, 41], iconAnchor: [12, 41] })}\r\n                                ref={markerRef}>\r\n                            </Marker>\r\n                                <TileLayer\r\n                                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                />\r\n                            </MapContainer>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={classes.formGroup}>\r\n                        <label>Location Type:</label>\r\n                        <select className={classes.select} name=\"type\" value={formData.type}  onChange={(e) => setFormData((formData) => ({ ...formData, type: e.target.value }))}>\r\n                            <option value={\"Business\"}>Business</option>\r\n                            <option value={\"Home\"}>Home</option>\r\n                            <option value={\"Shop\"}>Shop</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className={classes.formGroup}>\r\n                        <label>Logo</label>\r\n                        <label className={classes.upload}>\r\n                            <span>Upload</span>\r\n                            <input type={\"file\"} name=\"logo\" onChange={(e) => setFormData((formData) => ({ ...formData, logo: e.target.files[0] }))} />\r\n                        </label>\r\n                    </div>\r\n                    </div>\r\n\r\n                    \r\n                    <div className={classes.actions}>\r\n                        <button className={classes.cancel} onClick={() => naviage(\"/\", { replace: true, state: undefined })}>Cancel</button>\r\n                        <button className={classes.submit}>Save</button>\r\n                    </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Edit;",[],{"ruleId":"50","severity":1,"message":"51","line":28,"column":9,"nodeType":"52","endLine":28,"endColumn":11,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":2,"column":43,"nodeType":"56","messageId":"57","endLine":2,"endColumn":48},{"ruleId":"54","severity":1,"message":"58","line":3,"column":8,"nodeType":"56","messageId":"57","endLine":3,"endColumn":23},{"ruleId":"54","severity":1,"message":"59","line":6,"column":10,"nodeType":"56","messageId":"57","endLine":6,"endColumn":21},{"ruleId":"54","severity":1,"message":"60","line":20,"column":24,"nodeType":"56","messageId":"57","endLine":20,"endColumn":36},{"ruleId":"50","severity":1,"message":"61","line":38,"column":8,"nodeType":"52","endLine":38,"endColumn":10,"suggestions":"62"},"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'handleSetPosition'. Either include it or remove the dependency array. If 'handleSetPosition' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["63"],"no-unused-vars","'Popup' is defined but never used.","Identifier","unusedVar","'DraggableMarker' is defined but never used.","'useLocation' is defined but never used.","'setLocations' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'locations' and 'name'. Either include them or remove the dependency array.",["64"],{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [handleSetPosition]",{"range":"69","text":"70"},"Update the dependencies array to be: [locations, name]",{"range":"71","text":"72"},[886,888],"[handleSetPosition]",[1182,1184],"[locations, name]"]